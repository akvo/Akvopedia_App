apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply from: '../config/quality.gradle'

import com.android.build.gradle.internal.dsl.ProductFlavor;
import com.android.ddmlib.DdmPreferences

import java.util.concurrent.TimeUnit

// Copy the signing.properties.sample file to ~/.sign/signing.properties and adjust the values.
final File PROD_PROPS_FILE = new File(System.getProperty('user.home'), '.sign/signing.properties')
final File REPO_PROPS_FILE = new File('repo.properties')
final Properties PROD_PROPS = loadProperties(PROD_PROPS_FILE)
final Properties REPO_PROPS = loadProperties(REPO_PROPS_FILE)

final int ADB_TIMEOUT = TimeUnit.MINUTES.toMillis(5)
final boolean continuousIntegrationBuild = System.getenv('JENKINS_HOME') != null
final boolean preDexEnabled = hasProperty('pre.dex') ?
        Boolean.valueOf(getProperty('pre.dex').toString()) :
        !continuousIntegrationBuild
if (!preDexEnabled) {
    println 'Pre-dexing disabled.'
}

if (continuousIntegrationBuild) {
    DdmPreferences.setTimeOut(ADB_TIMEOUT)
    println "Device timeout is ${DdmPreferences.getTimeOut()}ms"
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

def computeVersionName(label) {
    return "2.2.${android.defaultConfig.versionCode}-${label}-${date}"
}

final JavaVersion JAVA_VERSION = JavaVersion.VERSION_1_7
android {
    // Keep version in sync with /project.properties
    compileSdkVersion 24

    buildToolsVersion '23.0.3'
    compileOptions {
        sourceCompatibility = JAVA_VERSION
        targetCompatibility = JAVA_VERSION
    }
    dexOptions {
        preDexLibraries = preDexEnabled
    }
    defaultConfig {
        applicationId 'org.wikipedia'
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 147
        testApplicationId 'org.wikipedia.test'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true
    }

    sourceSets {
        test {
            java.srcDirs += 'src/testlib/java'
        }
        androidTest {
            java.srcDirs += 'src/testlib/java'
        }
    }

    signingConfigs {
        prod {
            setSigningConfigKey(prod, PROD_PROPS)
        }
        debug {
            setSigningConfigKey(debug, REPO_PROPS)
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFile 'test-proguard-rules.pro'
        }
    }

    productFlavors {
        dev {
            versionName computeVersionName('dev')
            applicationIdSuffix 'dev'
            signingConfig signingConfigs.debug
        }
        prod {
            versionName computeVersionName('r')
            signingConfig signingConfigs.prod
        }
        releasesprod {
            versionName computeVersionName('releasesprod')
            signingConfig signingConfigs.prod
        }
        alpha {
            versionName computeVersionName('alpha')
            applicationIdSuffix 'alpha'
            signingConfig signingConfigs.debug
        }
        beta {
            versionName computeVersionName('beta')
            applicationIdSuffix 'beta'
            signingConfig signingConfigs.prod
        }
        amazon {
            versionName computeVersionName('amazon')
            signingConfig signingConfigs.prod
        }
        fdroid {
            versionName computeVersionName('fdroid')
            signingConfig signingConfigs.prod
        }
        custom {
            versionName computeVersionName(customChannel)
            // next line is for injecting a custom channel value into the custom/AndroidManifest.xml
            manifestPlaceholders = [customChannel:getProperty('customChannel').toString()]
            signingConfig signingConfigs.prod
        }
    }

    // while we still have lint errors; remove once those are fixed
    lintOptions {
        disable 'MissingTranslation'
        warning 'NewApi' // until https://code.google.com/p/android/issues/detail?id=137195 is released
        disable 'InvalidPackage' // required by Butter Knife
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor' // required by Butter Knife

        // For Espresso testing libraries. See http://stackoverflow.com/q/33800924/970346.
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
    }
}

def compileSubprojectOrModule = { String projectName,
                                  String moduleName,
                                  String excludeGroup = null,
                                  String excludeModule = null ->
    def dependency = project.findProject(projectName) ?: moduleName
    project.dependencies.add('compile', dependency, {exclude group: excludeGroup, module: excludeModule })
}

dependencies {
    compileSubprojectOrModule ':java-mwapi:json', 'org.mediawiki.api:json:1.3.5', 'org.json', 'json'

    // To keep the Maven Central dependencies up-to-date
    // use http://gradleplease.appspot.com/ or http://search.maven.org/.
    // Debug with ./gradlew -q app:dependencies --configuration compile

    String retrofitVersion = '2.0.2'
    String okHttpVersion = '3.3.1'
    String supportVersion = '24.0.0'
    String espressoVersion = '2.2.2'
    String butterKnifeVersion = '8.0.1'
    String frescoVersion = '0.10.0'
    String testingSupportVersion = '0.5'

    compile "com.android.support:appcompat-v7:$supportVersion" // includes support-v4
    compile "com.android.support:cardview-v7:$supportVersion"
    compile "com.android.support:design:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"
    compile "com.android.support:percent:$supportVersion"
    compile "com.android.support:palette-v7:$supportVersion"
    compile "com.android.support:preference-v14:$supportVersion"
    compile "com.facebook.fresco:animated-gif:$frescoVersion"
    compile "com.facebook.fresco:fresco:$frescoVersion"
    compile "com.facebook.fresco:imagepipeline-okhttp3:$frescoVersion"
    compile 'com.google.code.gson:gson:2.6.2'
    compile "com.squareup.okhttp3:okhttp-urlconnection:$okHttpVersion" // for JavaNetCookieJar
    compile "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    compile 'com.squareup:otto:1.3.8'
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile 'com.mobsandgeeks:android-saripaar:2.0.3'
    compile 'com.github.ryanjohn1:onboarding:1.0.3'
    compile "com.jakewharton:butterknife:$butterKnifeVersion"
    compile 'com.jakewharton:disklrucache:2.0.2'
    compile('com.mapbox.mapboxsdk:mapbox-android-sdk:4.0.1@aar') {
        transitive = true
    }
    compile 'net.hockeyapp.android:HockeySDK:4.0.1'
    compile 'org.apache.commons:commons-lang3:3.4'

    apt "com.jakewharton:butterknife-compiler:$butterKnifeVersion"

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'org.robolectric:robolectric:3.1'
    testCompile "com.squareup.okhttp3:mockwebserver:$okHttpVersion"

    // Required by Android JUnit Runner.
    androidTestCompile "com.android.support:support-annotations:$supportVersion"

    androidTestCompile "com.android.support.test:rules:$testingSupportVersion" // JUnit Rules
    androidTestCompile "com.android.support.test:runner:$testingSupportVersion" // Android JUnit Runner
    androidTestCompile "com.android.support.test.espresso:espresso-core:$espressoVersion"

    // Espresso-contrib for DatePicker, RecyclerView, Drawer actions, Accessibility checks,
    // CountingIdlingResource
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
        // http://stackoverflow.com/questions/30578243/why-would-adding-espresso-contrib-cause-an-inflateexception
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }

    // Espresso-web for WebView support
    androidTestCompile "com.android.support.test.espresso:espresso-web:$espressoVersion"

    // Espresso-idling-resource for synchronization with background jobs.
    androidTestCompile "com.android.support.test.espresso:espresso-idling-resource:$espressoVersion"

    androidTestCompile 'com.squareup.spoon:spoon-client:1.5.3'
}

private setSigningConfigKey(config, Properties props) {
    if (props) {
        config.storeFile = props['keystore'] == null ? null : file(props['keystore'])
        config.storePassword = props['store.pass']
        config.keyAlias = props['key.alias']
        config.keyPassword = props['key.pass']
    }
    return config
}

@Nullable private Properties loadProperties(File file) {
    Properties props = null
    if (file.canRead()) {
        props = new Properties()
        props.load(new FileInputStream(file))
    } else {
        System.err.println "\"${file}\" not found"
    }
    return props
}

addSyncContentProviderAuthority 'useroption', 'user_option'

private void addSyncContentProviderAuthority(String path, String name) {
    android.productFlavors.all { ProductFlavor flavor ->
        String authority = "${appId(flavor)}.sync.${path}"
        resValue 'string', "${name.toLowerCase()}_authority", authority
        buildConfigField 'String', "${name.toUpperCase()}_AUTHORITY", "\"$authority\""
    }
}

private String appId(ProductFlavor flavor) {
    String suffix = flavor.applicationIdSuffix
    String id = android.defaultConfig.applicationId + (suffix ? ".$suffix" : '')
    return id
}
